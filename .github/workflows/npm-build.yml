name: Push NPM Build to Artifactory
on: workflow_dispatch
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JF_PROJECT: ${{ vars.JF_PROJECT_KEY }}
      JF_URL: https://${{ vars.JF_URL }}/
      NPM_VIRTUAL: ghdemo-npm
      BUILD_NAME: ghdemo-build
      OIDC_INTEGRATION_NAME: github-oidc-integration
      OIDC_AUDIENCE: jfrog-github
      PRODUCTION_REPO_NAME: npm-prod-local
    defaults:
      run:
        working-directory: ./
    steps:
      # This action checks out the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Download the JFrog CLI and configure using JFrog Project and OIDC provider 
      - uses: jfrog/setup-jfrog-cli@v4
        name: Setup JFrog CLI
        id: setup-cli
        env:
          JF_URL: ${{ vars.JF_URL }}/
          JF_PROJECT: ${{ vars.JF_PROJECT }}
        with:
            oidc-provider-name: ${{ env.OIDC_INTEGRATION_NAME }}
            oidc-audience: ${{ env.OIDC_AUDIENCE }}
      
      # This command adds a new server configuration to the JFrog CLI   
      - run: |
          jf -v
      # Ping the JFrog Platfrom instnace 
      - run: |
          jf rt ping
      # Configure JFrog CLI for NPM 
      - run: |
          jf npmc --repo-deploy=${{ env.NPM_VIRTUAL }} --repo-resolve=${{ env.NPM_VIRTUAL }}
      # NPM Install using the CLI  
      - run: |
          jf npm install --build-name=${{ env.BUILD_NAME }} --build-number=1.0.${{github.run_number}}
      # Add GitHub Data to BuildInfo 
      - run: |
          jf rt build-add-git ${{ env.BUILD_NAME }}  1.0.${{github.run_number}}
      # Collect all Environmental information for NPM Build 
      - run: |
          jf rt build-collect-env ${{ env.BUILD_NAME }}  1.0.${{github.run_number}}
      # Using NPM Publish to uplaod the NPM Build
      - run: |
          jf npm publish --build-name=${{ env.BUILD_NAME }}  --build-number=1.0.${{github.run_number}}
      # Publish the BuildInfo into Artifactory 
      - run: |
          jf rt build-publish ${{ env.BUILD_NAME }}  1.0.${{github.run_number}}
      # Run JF Scan on Build 
      - run: |
          jf scan .
      # Scan the NPM Build with Xray 
      - run: |
           jf build-scan ${{ env.BUILD_NAME }}  1.0.${{github.run_number}}
      # Promote the Build from Dev to Production 
      - run: |
          jf rt build-promote ${{ env.BUILD_NAME }} 1.0.${{github.run_number}} ${{ env.PRODUCTION_REPO_NAME }}  --status=production
